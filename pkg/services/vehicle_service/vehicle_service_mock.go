// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/bryansandoval/projects/vehicle-api/pkg/services/vehicle_service/interface.go

// Package vehicle_service is a generated GoMock package.
package vehicle_service

import (
	models "github.com/bmsandoval/vehicle-api/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVehicleService is a mock of VehicleService interface
type MockVehicleService struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleServiceMockRecorder
}

// MockVehicleServiceMockRecorder is the mock recorder for MockVehicleService
type MockVehicleServiceMockRecorder struct {
	mock *MockVehicleService
}

// NewMockVehicleService creates a new mock instance
func NewMockVehicleService(ctrl *gomock.Controller) *MockVehicleService {
	mock := &MockVehicleService{ctrl: ctrl}
	mock.recorder = &MockVehicleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVehicleService) EXPECT() *MockVehicleServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockVehicleService) Create(arg0 *models.Vehicle) (*models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockVehicleServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVehicleService)(nil).Create), arg0)
}

// Read mocks base method
func (m *MockVehicleService) Read(arg0 int64) (*models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockVehicleServiceMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockVehicleService)(nil).Read), arg0)
}

// Search mocks base method
func (m *MockVehicleService) Search(limit, offset int, vMake, vModel string) ([]*models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", limit, offset, vMake, vModel)
	ret0, _ := ret[0].([]*models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockVehicleServiceMockRecorder) Search(limit, offset, vMake, vModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockVehicleService)(nil).Search), limit, offset, vMake, vModel)
}

// Update mocks base method
func (m *MockVehicleService) Update(arg0 *models.Vehicle) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockVehicleServiceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVehicleService)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockVehicleService) Delete(id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVehicleServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVehicleService)(nil).Delete), id)
}
